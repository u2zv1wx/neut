(no-implicit-core)

(include "core/foundation.neut")

(include "core/functor.neut")

(include "core/monad.neut")

(include "core/base.neut")

(include "core/identity.neut")

(inductive free ((g (hom tau tau)) (a tau))
  (leaf
    ((_ a))
    (free g a))
  (node
    ((b tau)
     (_ (g b))
     (_ (hom b (free g a))))
    (free g a)))

(use free)

(section free)

(define map
  ((g (hom tau tau)))
  (witness (functor-form (free g _))
    (λ (a b f m)
      (free.case (free g b) g a m
        (λ (x)
          (leaf g b (f x)))
        (λ (p val k)
          (with identity.bind
            (let f'
              (λ ((z p))
                ((map g) a b f (k z))))
            (node g b p val f')))))))

;; ;; f (Free f a) -> Free f aがほしいが。
;; ;; fに構造がないと無理そう？……いけた。
;; (define in ((f (hom tau tau)) (a tau) (x (f (free f a))))
;;   (witness (free f a)
;;     (free.node
;;       f
;;       a
;;       (free f a)
;;       x
;;       (λ (y) y))))

;; (define out
;;   ((f (hom tau tau))
;;    (M (monad f))
;;    (a tau)
;;    (x (free f a)))
;;   (witness (f (free f a))
;;     (free.case f a x
;;       (λ (_ _)
;;         (f (free f a)))
;;       (λ (x)
;;         ((functor.map f (monad.witness-functor f M))
;;            a
;;            (free f a)
;;            (λ (val) (free.leaf f a val))
;;            ((monad.return f M) a x)))
;;       (λ (b v k)
;;         ((functor.map f (monad.witness-functor f M))
;;           b
;;           (free f a)
;;           (λ (value) (free.in f a (k value)))
;;           v)))))

(define witness-functor
  ((g (hom tau tau)))
  (witness (functor (free g _))
    (functor.new
      (free g _)
      (free.map g))))

(define return
  ((g (hom tau tau)))
  (witness (return-type (free g _))
    (λ (a x)
      (leaf g a x))))

(define bind
  ((g (hom tau tau)))
  (witness (bind-type (free g _))
    (λ
      ((a tau)
       (b tau)
       (m (free g a))
       (k (hom a (free g b))))
      (free.case (free g b) g a m
        (λ (x)
          (k x))
        (λ (p val k')
          (node g b p val
            (λ ((v p))
              ((bind g) a b (k' v) k))))))))

(define witness-monad
  ((g (hom tau tau)))
  (witness (monad (free g _))
    (monad.new
      (free g _)
      (free.witness-functor g)
      (free.return g)
      (free.bind g))))

(end free)
