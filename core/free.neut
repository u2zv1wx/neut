(no-implicit-core)

(include library "core/foundation.neut")

(include library "core/functor.neut")

(include library "core/monad.neut")

(include library "core/base.neut")

(include library "core/identity.neut")

(inductive free-internal ((g (hom tau tau)) (a tau))
  (leaf
    ((_ a))
    (free-internal g a))
  ;; left Kan extension
  (node
    ((b tau)
     (_ (g b))
     (_ (hom b (free-internal g a))))
    (free-internal g a)))

(use free-internal)

(define free ((g (hom tau tau)))
  (witness (hom tau tau)
    (lambda (a)
      (free-internal g a))))

(define free.fold
  free-internal.fold)

(section free)

(define map ((g (hom tau tau)))
  (witness (functor-form (free g))
    (lambda (a b (f (hom a b)) m)
      (free.fold g a m
        (lambda (_ _)
          ((free g) b))
        (lambda (x)
          (@leaf g b (f x)))
        (lambda (p val acc)
          (@node g b p val acc))))))

(define witness-functor ((g (hom tau tau)))
  (witness (functor (free g))
    (record (functor (free g))
      (map
        (free.map g)))))

(define return ((g (hom tau tau)))
  (witness (return-type (free g))
    (lambda (_ x)
      (leaf x))))

(define bind ((g (hom tau tau)))
  (witness (bind-type (free g))
    (lambda
      ((a tau)
       (b tau)
       (m ((free g) a))
       (k (hom a ((free g) b))))
      (free.fold g a m
        (lambda (_ _)
          ((free g) b))
        (lambda (x)
          (k x))
        (lambda (p val acc)
          (node p val acc))))))

(define witness-monad ((g (hom tau tau)))
  (witness (monad (free g))
    (record (monad (free g))
      (witness-functor
        (free.witness-functor g))
      (return
        (free.return g))
      (bind
        (free.bind g)))))

(provide map)

(provide return)

(provide bind)

(provide witness-functor)

(provide witness-monad)

(end free)
