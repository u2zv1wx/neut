(no-implicit-core)

(include "core/foundation.neut")

(include "core/top.neut")

(include "core/identity.neut")

(define string
  (sigma
    ((len i64))
    (array len i8)))

(use os)

(define print-character
  ((value i8))
  (witness top
    (with identity.bind
      (let char (array-introduction i8 value))
      (os.write * os.stdout char 1)
      top.unit)))

(define string.print
  ((str string))
  (witness (product string i64)
    (destruct str (n content)
      (let len (write hole stdout &content n))
      (tuple (tuple n content) len))))

(provide print-character)

(provide string.print)

(unuse os)
