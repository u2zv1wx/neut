(no-implicit-core)

(include library "core/functor.neut")

(include library "core/monad.neut")

(use top)

(define identity ((a tau))
  (witness tau
    a))

(section identity)

(let map
  (witness (functor-form identity)
    (lambda (_ _ f value)
      (f value))))

(let return
  (witness (return-type identity)
    (lambda (_ x)
      x)))

(let bind
  (witness (bind-type identity)
    (lambda (_ _ comp k)
      (k comp))))

(let witness-functor
  (witness (functor identity)
    (record (functor identity)
      (map
        identity.map))))

(let witness-monad
  (witness (monad identity)
    (record (monad identity)
      (witness-functor
        identity.witness-functor)
      (return
        identity.return)
      (bind
        identity.bind))))

(end identity)
