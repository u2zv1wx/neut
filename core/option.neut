(no-implicit-core)

(include "foundation.neut")

(include "functor.neut")

(include "monad.neut")

(section option)

(inductive option ((a tau))
  (none ()
    (option a))
  (some ((x a))
    (option a)))

(definition map
  (witness (functor-form option)
    (lambda (a b f m)
      (case m
        ((none)
          (none))
        ((some x)
          (some (f x)))))))

;; (satisfies-functor option), (satisfies-return option)みたいに書いてもいいかも。

(definition return
  (witness (return-type option)
    (lambda (a x)
      (some x))))

(definition bind
  (witness (bind-type option)
    (lambda (a b m k)
      (case m
        ((none)
          (none))
        ((some x)
          (k x))))))

(definition from-option
  ([a tau]
   (x a)
   (m (option a)))
  (witness a
    (case m
      ((none)
        x)
      ((some y)
        y))))

(definition witness-functor
  (witness (functor option)
    (record (functor option)
      (map
        option:map))))

(definition witness-monad
  (witness (monad option)
    (record (monad option)
      (witness-functor
        option:witness-functor)
      (return
        option:return)
      (bind
        option:bind))))

(end option)
