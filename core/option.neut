(no-implicit-core)

(include "foundation.neut")

(include "functor.neut")

(include "monad.neut")

(section option)

(inductive option ((a tau))
  (none ()
    (option a))
  (some ((x a))
    (option a)))

(definition map
  (witness (functor-form option)
    (lambda (_ _ f m)
      (case m
        ((none)
          (none))
        ((some x)
          (some (f x)))))))

;; (satisfies-functor option), (satisfies-return option)みたいに書いてもいいかも。

(definition return
  (witness (return-type option)
    (lambda (_ x)
      (some x))))

(definition bind
  (witness (bind-type option)
    (lambda (_ _ m k)
      (case m
        ((none)
          (none))
        ((some x)
          (k x))))))

(definition from-option
  ([a tau]
   (x a)
   (m (option a)))
  (witness a
    (case m
      ((none)
        x)
      ((some y)
        y))))

(definition witness-functor
  (witness (functor option)
    (record (functor option)
      (map
        option:map))))

(definition witness-monad
  (witness (monad option)
    (record (monad option)
      (witness-functor
        option:witness-functor)
      (return
        option:return)
      (bind
        option:bind))))

(end option)


;; 射影はこういう実装になるはずだけど。推論が通ってねえ。
;; やっぱcaseの推論は修正する必要がある。
;; (let k (functor-form option)
;;   (case option:witness-functor
;;     ((functor:unfold f ma base-value) (ma base-value))))

;; (definition witness-fake
;;   (witness (fake option)
;;     (fake:unfold
;;       fake
;;       (lambda ((_ (fake option))) option:map)
;;       (unsafe:cast (hom tau tau) (fake option) (lambda (x) x)))))
      ;; (map
      ;;   option:map))))

;; (let pohe (functor-form option)
;;   (case witness-fake
;;     ((fake:unfold f ma base-value) (ma base-value))))
