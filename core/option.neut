(no-implicit-core)

(include library "core/foundation.neut")

(include library "core/functor.neut")

(include library "core/monad.neut")

(section option)

(inductive option ((a tau))
  (none ()
    (option a))
  (some ((x a))
    (option a)))

(define map
  (witness (functor-form option)
    (lambda (a b f m)
      (fold m
        (lambda (_)
          (option b))
        (lambda ()
          (none))
        (lambda (x)
          (some (f x)))))))

(define return
  (witness (return-type option)
    (lambda (_ x)
      (some x))))

(define bind
  (witness (bind-type option)
    (lambda (a b m k)
      (fold m
        (lambda (_)
          (option b))
        (lambda ()
          (none))
        (lambda (x)
          (k x))))))

(define from-option
  ((a tau)
   (x a)
   (m (option a)))
  (witness a
    (fold m
      (lambda (_)
        a)
      (lambda ()
        x)
      (lambda (y)
        y))))

(attribute from-option (implicit 0))

?functor.unfold

?monad.unfold

(define witness-functor
  (witness (functor option)
    (record (functor option)
      (map
        option.map))))

(define witness-monad
  (witness (monad option)
    (record (monad option)
      (witness-functor
        option.witness-functor)
      (return
        option.return)
      (bind
        option.bind))))

(end option)
