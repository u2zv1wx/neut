;; preliminary:

(no-implicit-core)

;; for test
;; (ensure libarchive/3.4.2
;;   "https://www.libarchive.org/downloads/libarchive-3.4.2.tar.gz")

(include "notation.neut")

(include "option.neut")

(include "bool.neut")

(use option)

(use bool)

;; content:

(section list)

(inductive list ((a tau)) ;; list := Pi (a : tau). tauだからaがunusedとして報告される。修正すること。
  (nil ()
    (list a))
  (cons ((_ a) (_ (list a)))
    (list a)))

(keyword list:new)

(notation (list:new)
  (list:nil))

(notation (list:new a)
  (list:cons a (list:nil)))

(notation (list:new a rest+)
  (list:cons a (list:new rest+)))

(define head
  ((a tau)
   (xs (list a)))
  (witness (option a)
    (case xs
      ((nil)
        (none))
      ((cons y _)
        (some y)))))

(attribute head (implicit 0))

(define length
  ((a tau)
   (xs (list a)))
  (witness u64
    (case xs
      ((nil)
        0)
      ((cons _ ys)
        (u64:add 1 (length a ys))))))

(attribute length (implicit 0))

(define append
  ((a tau)
   (xs (list a))
   (ys (list a)))
  (witness (list a)
    (case xs
      ((nil)
        ys)
      ((cons z zs)
        (cons z (append a zs ys))))))

(attribute append (implicit 0))

(define is-null
  ((a tau)
   (xs (list a)))
  (witness bool
    (case xs
      ((nil)
        true)
      ((cons _ _)
        false))))

(attribute is-null (implicit 0))

(define map
  ((a tau)
   (b tau)
   (f (hom a b))
   (xs (list a)))
  (witness (list b)
    (case xs
      ((nil)
        (nil))
      ((cons y ys)
        (cons
          (f y)
          (map a b f ys))))))

(attribute map (implicit 0 1))

(define return
  ((a tau)
   (x a))
  (witness (list a)
    (list:new x)))
    ;; (cons a x (nil a))))

(attribute return (implicit 0))

(define concatenate
  ((a tau)
   (m (list (list a))))
  (witness (list a)
    (case m
      ((nil)
        (nil))
      ((cons x xs)
        (append x (concatenate a xs))))))

(attribute concatenate (implicit 0))

(define bind
  ((a tau)
   (b tau)
   (m (list a))
   (k (hom a (list b))))
  (witness (list b)
    (concatenate (map k m))))

(attribute bind (implicit 0 1))

(provide head)

(provide length)

(provide append)

(provide is-null)

(provide map)

(provide return)

(provide concatenate)

(provide bind)

(end list)
