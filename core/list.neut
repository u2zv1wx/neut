;; preliminary.

(no-implicit-core)

;; for test
;; (ensure libarchive/3.4.2
;;   "https.//www.libarchive.org/downloads/libarchive-3.4.2.tar.gz")

(include "core/notation.neut")

(include "core/option.neut")

(include "core/bool.neut")

(include "core/lazy.neut")

(include "core/identity.neut")

(include "core/string.neut")

(include "core/integer.neut")

(use option)

(use bool)

(use lazy)

;; content.

(section list)

(inductive list ((a tau))
  (nil
    ()
    (list a))
  (cons
    ((_ a)
     (_ (pi () (list a))))
    (list a)))

(keyword list.new)

(notation (list.new)
  (list.nil))

;; (notation (list.new a)
;;   (list.cons * a (list.nil *)))

;; (notation (list.new a rest+)
;;   (list.cons * a (list.new rest+)))

(notation (list.new a)
  (list.cons * a (lazy.thunk * (list.nil *))))

(notation (list.new a rest+)
  (list.cons * a (lazy.thunk * (list.new rest+))))


(define head
  ((a tau)
   (xs (list a)))
  (witness (option a)
    (list.fold a xs
      (λ (_)
        (option a))
      (λ ()
        (none a))
      (λ (h _)
        (some a h)))))

(define length
  ((a tau)
   (xs (list a)))
  (witness i64
    (list.fold a xs
      (λ (_)
        i64)
      (λ ()
        0)
      (λ (_ acc)
        (add-i64 1 (acc))))))

(define append
  ((a tau)
   (xs (list a))
   (ys (list a)))
  (witness (list a)
    (list.fold a xs
      (λ (_)
        (list a))
      (λ ()
        ys)
      (λ (z acc)
        (cons a z acc)))))

(define is-null
  ((a tau)
   (xs (list a)))
  (witness bool
    (list.fold a xs
      (λ (_)
        bool)
      (λ ()
        true)
      (λ (_ _)
        false))))

(define map
  ((a tau)
   (b tau)
   (f (hom a b))
   (xs (list a)))
  (witness (list b)
    (list.fold a xs
      (λ (_)
        (list b))
      (λ ()
        (nil b))
      (λ (y acc)
        (cons b (f y) acc)))))

(define return
  ((a tau)
   (x a))
  (witness (list a)
    (list.new x)))

(define concatenate
  ((a tau)
   (m (list (list a))))
  (witness (list a)
    (list.fold (list a) m
      (λ (_)
        (list a))
      (λ ()
        (nil *))
      (λ (xs acc)
        (append * xs (acc))))))

(define bind
  ((a tau)
   (b tau)
   (m (list a))
   (k (hom a (list b))))
  (witness (list b)
    (concatenate * (map * * k m))))

;; (provide head)

;; (provide length)

;; (provide append)

;; (provide is-null)

;; (provide map)

;; (provide return)

;; (provide concatenate)

;; (provide bind)

(end list)
