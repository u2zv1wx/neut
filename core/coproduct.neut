(no-implicit-core)

(include "notation.neut")

(include "functor.neut")

(include "monad.neut")

(section coproduct)

(inductive coproduct ((e tau) (a tau))
  (left ((_ e)) (coproduct e a))
  (right ((_ a)) (coproduct e a)))

(definition map
  ((e tau)
   (a tau)
   (b tau)
   (f (hom a b))
   (m (coproduct e a)))
  (witness (coproduct e b)
    (case m
      ((left err)
        (left * * err))
      ((right val)
        (right * * (f val))))))

;; (attribute map (implicit 0 1 2))

(definition return ((e tau) (a tau) (x a))
  (witness (coproduct e a)
    (right * * x)))

;; (attribute return (implicit 0 1))

(definition bind
  ((e tau)
   (a tau)
   (b tau)
   (comp (coproduct e a))
   (k (hom a (coproduct e b))))
  (witness (coproduct e b)
    (case comp
      ((left err)
        (left * * err))
      ((right val)
        (k val)))))

;; (attribute bind (implicit 0 1 2))

(definition throw
  ((e tau)
   (a tau)
   (err e))
  (witness (coproduct e a)
    (left * * err)))

;; (attribute throw (implicit 0 1))

(definition either ((e tau))
  (witness (hom tau tau)
    (lambda ((a tau))
      (coproduct e a))))

(definition either-map ((e tau))
  (witness (functor-form (either e))
    (lambda (_ _ f m)
      (coproduct:map * * * f m))))

(definition either-return ((e tau))
  (witness (return-type (either e))
    (lambda (_ x)
      (coproduct:return * * x))))

(definition either-bind ((e tau))
  (witness (bind-type (either e))
    (lambda (_ _ m k)
      (coproduct:bind * * * m k))))

(definition witness-functor ((e tau))
  (witness (functor (either e))
    (record (functor (either e))
      (map
        (either-map e)))))

(definition witness-monad ((e tau))
  (witness (monad (either e))
    (record (monad (either e))
      (witness-functor
        (witness-functor e))
      (return
        (either-return e))
      (bind
        (either-bind e)))))

(provide throw)

(provide witness-monad)

(end coproduct)
