;; state.neut

(include library "core/functor.neut")

(use top)

(definition state ((s tau))
  (witness (hom tau tau)
    (lambda (a)
      (hom s (product s a)))))

(section state)

(definition map ((s tau))
  (witness (functor-form (state s))
    (lambda (a b f m)
      (lambda (env)
        (destruct (m env)
          (new-env val)
          (tuple new-env (f val)))))))

(definition return ((s tau))
  (witness (return-type (state s))
    (lambda (a x)
      (lambda (env)
        (tuple env x)))))

(definition bind ((s tau))
  (witness (bind-type (state s))
    (lambda (a b comp k)
      (lambda (env)
        (destruct (comp env)
          (new-env val)
          ((k val) new-env))))))

(definition get ([s tau])
  (witness ((state s) s)
    (lambda (env) (tuple env env))))

(definition put ([s tau] (env s))
  (witness ((state s) top)
    (lambda (_) (tuple env unit))))

(definition witness-functor ((s tau))
  (witness (functor (state s))
    (record (functor (state s))
      (map
        (state:map s)))))

(definition witness-monad ((s tau))
  (witness (monad (state s))
    (record (monad (state s))
      (witness-functor
        (state:witness-functor s))
      (return
        (state:return s))
      (bind
        (state:bind s)))))

(end state)


;; (@admit i64 1)

;; (os:exit i64 ((@state:foo i64 10)))
