(no-implicit-core)

(include "core/notation.neut")

(include "core/functor.neut")

(include "core/string.neut")

(inductive µ ((f (hom tau tau)))
  (lan
    ((b tau)
     (_ (f b))
     (_ (hom b (µ f))))
    (µ f)))

;; F (µ F) -> µF
(define µ.in
  ((f (hom tau tau))
   (x (f (µ f))))
  (witness (µ f)
    (with identity.bind
    (µ.lan
      f
      (µ f)
      x
      (λ (y)
        (with identity.bind
        y))))))

;; µ F -> F (µ F)
(define µ.out
  ((f (hom tau tau))
   (F (functor f))
   (x (µ f)))
  (witness (f (µ f))
    (with identity.bind
      (µ.fold f x
        (λ (_)
          (f (µ f)))
        (λ (b v k)
          (with identity.bind
            ((functor.map f F)
              b
              (µ f)
              (λ (value)
              (with identity.bind
                (µ.in f (k value))))
              v)))))))
