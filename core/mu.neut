(no-implicit-core)

(include "core/notation.neut")

(include "core/functor.neut")

(inductive mu ((f (hom tau tau)))
  (lan
    ((b tau)
     (_ (f b))
     (_ (hom b (mu f))))
    (mu f)))

;; F (mu F) -> muF
(define mu.in
  ((f (hom tau tau))
   (x (f (mu f))))
  (witness (mu f)
    (mu.lan
      f
      (mu f)
      x
      (位 (y) y))))

;; mu F -> F (mu F)
(define mu.out
  ((f (hom tau tau))
   (F (functor f))
   (x (mu f)))
  (witness (f (mu f))
    (with identity.bind
      (mu.fold f x
        (位 (_)
          (f (mu f)))
        (位 (b v k)
          ((functor.map f F)
            b
            (mu f)
            (位 (value) (mu.in f (k value)))
            v))))))
