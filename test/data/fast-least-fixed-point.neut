(include "../header.neut")

(section hidden)

(define mu
  ((f (hom tau tau)))
  (Î 
    ((F (hom (hom tau tau) tau))
     (_ (Î  ((b tau) (_ (f b))) (F f))))
    (F f)))

(define mu.in
  ((f (hom tau tau))
   (x (f (mu f))))
  (witness (mu f)
    (unsafe.cast (f (mu f)) (mu f) x)))

(define mu.out
  ((f (hom tau tau))
   (x (mu f)))
  (witness (f (mu f))
    (unsafe.cast (mu f) (f (mu f)) x)))

(define-data my-list-f ((a tau) (r tau))
  (nil)
  (cons (_ a) (_ r)))

(define my-list
  ((a tau))
  (mu (my-list-f a _)))

(define my-list.nil
  ((a tau))
  (witness (my-list a)
    (mu.in (my-list-f a _) (my-list-f.nil a (my-list a)))))

(define my-list.cons
  ((a tau)
   (x a)
   (xs (my-list a)))
  (witness (my-list a)
    (mu.in (my-list-f a _) (my-list-f.cons a (my-list a) x xs))))

(define length
  ((a tau)
   (xs (my-list a)))
  (witness i64
    (case (mu.out (my-list-f a _) xs)
      ((my-list-f.nil)
        0)
      ((my-list-f.cons y ys)
        (add-i64 1 (length a ys))))))

(define xs
  (my-list.cons i64 0 (my-list.cons * 1 (my-list.cons * 2 (my-list.nil *)))))

(reduce (i64.print (length i64 xs)))
