(include "../header.neut")

(section hidden)

(define mu
  ((f (hom tau tau)))
  (Π
    ((F (hom (hom tau tau) tau))
     (_ (Π ((b tau) (_ (f b))) (F f))))
    (F f)))

(define mu.in
  ((f (hom tau tau))
   (x (f (mu f))))
  (witness (mu f)
    (unsafe.cast (f (mu f)) (mu f) x)))

(define mu.out
  ((f (hom tau tau))
   (x (mu f)))
  (witness (f (mu f))
    (unsafe.cast (mu f) (f (mu f)) x)))

(define-data list-f ((a tau) (r tau))
  (nil)
  (cons (_ a) (_ r)))

(define list
  ((a tau))
  (mu (list-f a _)))

(define list.nil
  ((a tau))
  (witness (list a)
    (mu.in (list-f a _) (list-f.nil a (list a)))))

(define list.cons
  ((a tau)
   (x a)
   (xs (list a)))
  (witness (list a)
    (mu.in (list-f a _) (list-f.cons a (list a) x xs))))

(define length
  ((a tau)
   (xs (list a)))
  (witness i64
    (list-f.case
      i64
      a
      (list a)
      (mu.out (list-f a _) xs)
      (λ ()
        0)
      (λ (y ys)
        (add-i64 1 (length a ys))))))

(define xs
  (list.cons i64 0 (list.cons * 1 (list.cons * 2 (list.nil *)))))

(reduce (i64.print (length i64 xs)))
