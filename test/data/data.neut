include "../header.neut"

section hidden

define-data nat
- zero
- succ nat

define-data my-list (a : tau)
- nil
- cons a (my-list a)

define-data my-list2 (a : tau)
- nil
- cons a (my-list2 a)

define-data item (a : tau)
- cons
- cons0 (item a) (my-list (my-list2 (my-list (item a))))
- cons1 (item a) (my-list (item a))
- cons2 (item a) (my-list (my-list (my-list2 (item a))))
- cons3 (item a) (my-list (my-list (item a)))
- cons4 (item a) (my-list2 (my-list (item a)))
- cons5 a (item a)

-- ; ; mutually inductive type
-- ; (data
-- ;   (even ((_ (nat)))
-- ;     (zero-is-even
-- ;       ()
-- ;       (even (nat.zero)))
-- ;     (succ-of-odd-is-even
-- ;       ((n (nat))
-- ;        (_ (odd n)))
-- ;       (even (nat.succ n))))
-- ;   (odd ((_ (nat)))
-- ;     (succ-of-even-is-odd
-- ;       ((n (nat))
-- ;        (_ (even n)))
-- ;       (odd (nat.succ n)))))

end hidden
