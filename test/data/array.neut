include "../header.neut"

define empty-array : i8-array =
  array-introduction i8

define xs : i64-array =
  array-introduction i64 1 2 -30 20

define fs1 : f16-array =
  array-introduction f16 3.28 2.14 2.0 -9.82

define fs2 : f32-array =
  array-introduction f32 3.28 2.14 2.0 -9.82

define fs3 : f64-array =
  array-introduction f64 3.28 2.14 2.0 -9.82

define l (xs : i64-array) : i64 =
  idealize xs over s in
  let a = i64-array-access * xs 0 in
  let b = i64-array-access * xs 1 in
  let c = i64-array-access * xs 2 in
  let d = i64-array-access * xs 3 in
  add-i64 a (add-i64 b (add-i64 c d))

-- こう書くと壊れる：
-- define l : i64 =
--   idealize xs over s in
--   let a = i64-array-access * xs 0 in
--   let b = i64-array-access * xs 1 in
--   let c = i64-array-access * xs 2 in
--   let d = i64-array-access * xs 3 in
--   add-i64 a (add-i64 b (add-i64 c d))
-- グローバル変数としてのxsがarrayを割り当てて、んでそれがまさにグローバル変数であるっていう理由によって解放されないから、だろうな。

-- こう書くと安全：
-- define l' : i64 =
--   let ys = xs in
--   idealize ys over s in
--   let a = i64-array-access * ys 0 in
--   let b = i64-array-access * ys 1 in
--   let c = i64-array-access * ys 2 in
--   let d = i64-array-access * ys 3 in
--   add-i64 a (add-i64 b (add-i64 c d))

reduce
  i64.print (l xs)
