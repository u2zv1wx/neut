(reserve let)

(reserve begin)

(value nat universe)

(value zero nat)

(value succ
  (node ((_ nat)) nat))

(value bool universe)

(value true bool)

(value false bool)

(notation (begin e)
  e)

(notation (begin e rest+)
  (bind (_ _) (begin e) (begin rest+)))

(notation (begin (let x e+) rest+)
  (bind (x _) (begin e+) (begin rest+)))

(notation (begin (let x type e+) rest+)
  (bind (x type) (begin e+) (begin rest+)))

(return true)

;; これとか結構読みやすくていいんじゃない？
(match (v1 ... vn)
  (with ((succ x) (succ y))
    (foo))
  (with ((succ x))
    foo)
  (with (zero)
    some-function))

(match (n)
  (with ((zero)) ;; 意味的にはzeroよりも(zero)のほうが正しい
    some-function)
  (with ((succ x))
    foo))

(value nil
  (node ((a type))
    (list a)))

(value cons
  (node ((a type) (_ (list a)))
    (list a)))

(value nil
  ((a type))
  (list a))

(value cons
  ((a type)
   (_ (list a)))
  (list a))

(value zero
  ()
  (nat))

(value succ
  ((_ (nat)))
  (nat))
