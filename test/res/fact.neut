(reserve let)

(reserve begin)

(notation (begin e)
  e)

(notation (begin e rest+)
  ((lambda ((_ _)) (begin rest+)) (begin e)))

(notation (begin (let x e+) rest+)
  ((lambda ((x _)) (begin rest+)) (begin e+)))

(index top unit)

(index i32)

(primitive core.add (hom i32 i32 i32))

(primitive core.sub (hom i32 i32 i32))

(primitive core.mul (hom i32 i32 i32))

(primitive i32.copy (hom i32 (tensor i32 i32)))

(definition type (box universe))

(definition state
  (lambda ((S type) (A type))
    (hom S (tensor S A))))

(index world)

(definition io
  (state world))

(primitive print (hom i32 (io top)))

(definition fact
  (mu self
    (lambda (x)
      (case x
        ((1 1)
         (n (begin
              (let p (i32.copy n))
              (case p
                ((pair n1 n2) (core.mul n1 (self (core.sub n2 1))))))))))))

(print (fact 10))
