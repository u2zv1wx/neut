(reserve let)

(reserve begin)

(notation (begin e)
  e)

(notation (begin e rest+)
  ((lambda ((_ _)) (begin rest+)) (begin e)))

(notation (begin (let x e+) rest+)
  ((lambda ((x _)) (begin rest+)) (begin e+)))

(reserve arrow)

(notation (arrow rest+)
  (box (hom rest+)))

(index top unit)

(index i32)

(index u32)

(primitive core.i32.add (arrow i32 i32 i32))

(primitive core.i32.sub (arrow i32 i32 i32))

(primitive core.i32.mul (arrow i32 i32 i32))

(primitive core.i32.copy (arrow i32 (tensor i32 i32)))

(definition type (box universe))

(definition state
  (data
    (lambda ((S type) (A type))
      (hom S (tensor S A)))))

(index world)

(definition io
  ((code state) world))

(definition io2
  ((code state) world))

(primitive core.i32.print (arrow i32 (io top)))

(definition fact
  (mu self
    (lambda (x)
      (case x
        ((1 1)
         (n (begin
              (let p ((code core.i32.copy) n))
              (case p
                ((pair n1 n2)
                 ((code core.i32.mul) n1 ((code self) ((code core.i32.sub) n2 1))))))))))))

(apply (code core.i32.print) (fact 10))
