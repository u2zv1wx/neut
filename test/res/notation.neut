;; define basic notations

;; synonyms
(keyword type)

(notation type tau)

(keyword universe)

(notation universe tau)

(keyword forall)

(notation forall pi)

(keyword apply)

(notation apply pi-elimination)

(keyword case)

(notation case enum-elimination)

(keyword hole)

(notation hole (zeta _))

(keyword let)

(keyword begin)

(keyword definition)

(notation (begin (let (x t) e+) rest+)
  ((pi-introduction ((x t)) (begin rest+)) (begin e+)))

(notation (begin (let x e+) rest+)
  ((pi-introduction ((x hole)) (begin rest+)) (begin e+)))

(notation (begin e rest+)
  ((pi-introduction ((_ hole)) (begin rest+)) (begin e)))

(notation (begin e) e)

;; (notation (begin (definition x e) rest+)
;;   (pi-e (pi-i ((x _)) (begin rest+)) (mu x e)))

;; (notation (begin (definition name (x+) e+) rest+)
;;   (pi-e (pi-i ((name _)) (begin rest+)) (mu name (pi-i (x+) (begin e+)))))

;; lambda: pi-introduction with implicit begin block
(keyword lambda)

(notation (lambda () e+)
  (pi-introduction () (begin e+)))

(notation (lambda (xts+) e+)
  (pi-introduction (xts+) (begin e+)))

;; define recursive term at top level without using `mu` explicitly
;; (notation (definition name e)
;;   (let name (mu name e))) ;; こっちの `let` はspecial formのほうのlet.
;; 引数がないときはmuを入れない
(notation (definition name e)
  (let name e)) ;; こっちの `let` はspecial formのほうのlet.

(notation (definition name () e+)
  (let name (iterate name () e+)))

(notation (definition name (x+) e+)
  (let name (iterate name (x+) e+)))

;; type ascription
;; (ascribe e t) ~> (let (_ t) e)
(keyword ascription)

(notation (ascription e t)
  (let (_ t) e))

(keyword with-type)

(notation (with-type t e)
  ((lambda ((x t)) x) e))
  ;; ~> (lambda (_ t) cont) @ e

(keyword to-type-list)

(notation (to-type-list t)
  ((_ t)))

(notation (to-type-list t t+)
  ((_ t) (splice (to-type-list t+))))

(keyword arrow)

(notation (arrow (t+) cod)
  (pi (to-type-list t+) cod))

(keyword hom)

(notation (hom t) t)

(notation (hom t rest+)
  (pi
    ((_ t))
    (hom rest+)))

(keyword sigma)

(notation (sigma (xt+) t)
  (pi
    ((c tau)
     (_ (pi (xt+ (_ t)) c)))
    c))

(keyword product)

(notation (product t+)
  (pi
    ((c tau)
     (_ (arrow (t+) c)))
    c))

(keyword sigma-introduction)

(keyword to-hole-list)

(notation (to-hole-list e)
  ((_ hole)))

(notation (to-hole-list e e+)
  ((_ hole) (splice (to-hole-list e+))))

(notation (sigma-introduction e+)
  (lambda
    ((elim-result-type tau)
     (eliminator (pi (to-hole-list e+) elim-result-type)))
    (eliminator e+)))

(keyword sigma-elimination)

(notation (sigma-elimination (xt+) e1 e2+)
  (e1 hole (lambda (xt+) e2+)))
