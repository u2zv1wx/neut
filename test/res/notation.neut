;; reserve primitive keywords

(reserve forall)

(reserve hom)

(reserve lambda)

(reserve apply)

(reserve exists)

(reserve tensor)

(reserve pair)

(reserve case)

(reserve universe)

(reserve mu)

(reserve module)

(reserve include)

(reserve use)

;; define basic notations

;; sequential execution
(reserve let)

(reserve begin)

(reserve definition)

(notation (begin e)
  e)

(notation (begin e rest+)
  (apply (lambda ((_ _)) (begin rest+)) (begin e)))

(notation (begin (let x e+) rest+)
  (apply (lambda ((x _)) (begin rest+)) (begin e+)))

(notation (begin (definition x e) rest+)
  (apply (lambda ((x _)) (begin rest+)) (data (mu x e))))

(notation (begin (definition name (x+) e+) rest+)
  (apply (lambda ((name _)) (begin rest+)) (data (mu name (lambda (x+) (begin e+))))))

(notation (definition name e)
  (let name (data (mu name e))))

(notation (definition name (x+) e+)
  (let name (data (mu name (lambda (x+) (begin e+))))))

;; shorthands for types
(reserve arrow)

(notation (arrow rest+)
  (box (hom rest+)))

(let type (box universe))
