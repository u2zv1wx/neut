;; reserve keywords

(keyword forall)

(keyword arrow)

(keyword lambda)

(keyword apply)

(keyword exists)

(keyword product)

(keyword pair)

(keyword case)

(keyword universe)

(keyword mu)

(keyword module)

(keyword include)

(keyword use)

;; define basic notations

;; sequential execution
(keyword let)

(keyword do)

(keyword definition)

(notation (do e)
  e)

(notation (do e rest+)
  (apply (lambda ((_ _)) (do rest+)) (do e)))

(notation (do (let x e+) rest+)
  (apply (lambda ((x _)) (do rest+)) (do e+)))

(notation (do (definition x e) rest+)
  (apply (lambda ((x _)) (do rest+)) (mu x e)))

(notation (do (definition name (x+) e+) rest+)
  (apply (lambda ((name _)) (do rest+)) (mu name (lambda (x+) (do e+)))))

(notation (definition name e)
  (let name (mu name e)))

(notation (definition name (x+) e+)
  (let name (mu name (lambda (x+) (do e+)))))

;; shorthands for types
(keyword type)

(notation type universe)
