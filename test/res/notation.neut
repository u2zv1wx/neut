;; reserve primitive keywords

(reserve forall)

(reserve arrow)

(reserve lambda)

(reserve apply)

(reserve exists)

(reserve product)

(reserve pair)

(reserve case)

(reserve universe)

(reserve mu)

(reserve module)

(reserve include)

(reserve use)

;; define basic notations

;; sequential execution
(reserve let)

(reserve do)

(reserve definition)

(notation (do e)
  e)

(notation (do e rest+)
  (apply (lambda ((_ _)) (do rest+)) (do e)))

(notation (do (let x e+) rest+)
  (apply (lambda ((x _)) (do rest+)) (do e+)))

(notation (do (definition x e) rest+)
  (apply (lambda ((x _)) (do rest+)) (mu x e)))

(notation (do (definition name (x+) e+) rest+)
  (apply (lambda ((name _)) (do rest+)) (mu name (lambda (x+) (do e+)))))

(notation (definition name e)
  (let name (mu name e)))

(notation (definition name (x+) e+)
  (let name (mu name (lambda (x+) (do e+)))))

;; shorthands for types
(reserve type)

(notation type universe)
