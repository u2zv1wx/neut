(reserve let)

(reserve begin)

(value nat
  ()
  universe)

(value zero
  ()
  (nat))

(value succ
  ((_ (nat)))
  (nat))

(value bool
  ()
  universe)

(value true
  ()
  (bool))

(value false
  ()
  (bool))

(notation (begin e)
  e)

(notation (begin e rest+)
  (bind _ (begin e) (begin rest+)))

(notation (begin (let x e+) rest+)
  (bind x (begin e+) (begin rest+)))

(begin
  (let yay (return (thunk (lambda (x) (return (succ x))))))
  (let foo (return (zero)))
  (let ya (return (thunk (lambda (x) (return (succ foo))))))
  ((unthunk yay) (succ (zero)))
  (return (true)))
