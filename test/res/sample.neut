(reserve let)

(reserve begin)

(value nat universe)

(value zero nat)

(value succ
  (node (_ nat) nat))

(value bool universe)

(value true bool)

(value false bool)

(notation (begin e)
  e)

(notation (begin e rest+)
  (bind (_ _) (begin e) (begin rest+)))

(notation (begin (let x e+) rest+)
  (bind (x _) (begin e+) (begin rest+)))

(notation (begin (let x type e+) rest+)
  (bind (x type) (begin e+) (begin rest+)))

(begin
  (let yay (return (thunk (lambda (x nat) (return (succ x))))))
  ((unthunk yay) zero)
  (return true))
