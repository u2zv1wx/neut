(include "../../../foundation.neut")

(define-macro foo (x)
  ((lambda-meta (x)
     (lambda-meta (x)
       `(hoge ,x)))
    (lambda-meta (x) x)))

(dry-expand
  ((foo meta.node.head) `(aoeu pohe)))

(define-macro z-combinator (f)
  ((lambda-meta (x) (f (lambda-meta (v) ((x x) v))))
   (lambda-meta (x) (f (lambda-meta (v) ((x x) v))))))

(define-macro length (xs)
  (if-meta (meta.is-nil xs)
    0
    (meta.int.add 1 (length (meta.node.tail xs)))))

(dry-expand
  (length `(a b c d e f)))

(define-macro length-combinator
  (z-combinator
    (lambda-meta (self)
      (lambda-meta (xs)
        (if-meta (meta.is-nil xs)
          0
          (meta.int.add 1 (self (meta.node.tail xs))))))))

(dry-expand
  (length-combinator `(a b c d e f)))
