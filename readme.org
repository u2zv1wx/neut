* Neut
** Syntax
#+BEGIN_SRC
-- identifier
x    ::= <string>

-- literal
l    ::= x
       | <int>
       | <float>

-- case
c    ::= (epsilon-intro l)
       | (default)

-- term
p, A ::= (tau)
       | (theta x)
       | (upsilon x)
       | (epsilon x)
       | (epsilon-introduction l)
       | (epsilon-elimination (x A) e (c1 e1) ... (cn en))
       | (pi ((x1 A1) ... (xn An)) A)
       | (pi-introduction ((x1 A1) ... (xn An)) e)
       | (pi-elimination e e1 ... en)
       | (mu (x A) e)
       | (zeta x)
#+END_SRC

** Installation
#+BEGIN_SRC
$ git clone https://github.com/u2zv1wx/neut
$ stack build
$ stack exec neut build test/res/fact.neut
$ ./file
#+END_SRC
Neut depends on LLVM and Clang. When you execute =neut build=, both of the commands =llc= and =clang= must be in your =$PATH=.

** References
- L. de Moura, J. Avigad, S. Kong, and C. Roux, Elaboration in Dependent Type Theory, [[https://arxiv.org/abs/1505.04324]], 2015.
- P. Levy, Call-by-Push-Value: A Subsuming Paradigm, Ph. D. thesis, Queen Mary College, 2001.
