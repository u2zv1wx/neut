* Neut

** About

Neut is a programming language based on dependent modal linear type theory, focusing on canonicity and orthogonality. The key features of Neut include:

- Expressive power of dependent type theory
- Static, predictable memory allocation/deallocation
- Dependent type inference by non-chronological backtracking

** Syntax

#+BEGIN_SRC
-- identifier
x    ::= <string>

-- variable
u    ::= (upsilon s x)

-- resource modality
s    ::= primitive
       | e

-- term
e, A ::= u
       | (epsilon x)
       | (epsilon-intro x)
       | (epsilon-elim x e (b1 e1) ... (bn en))
       | (pi s ((u1 A1) ... (un An)) A)
       | (pi-intro s ((u1 A1) ... (un An)) e)
       | (pi-elim s e e1 ... en)
       | (sigma s ((u1 A1) ... (un An)) e)
       | (sigma-intro s e1 ... en)
       | (sigma-elim s ((u1 A1) ... (un An)) e1 e2)
       | (recurse (u A) e)
       | (universe <int>)

-- branch
b    ::= (epsilon-intro x)
       | u
       | (default)
#+END_SRC

Built-in modality:
#+BEGIN_SRC
cartesian ::= epsilon "cartesian"
relevant ::= epsilon "relevant"
affine ::= epsilon "affine"
linear ::= epsilon "linear"
#+END_SRC


** Installation

#+BEGIN_SRC
$ git clone https://github.com/u2zv1wx/neut
$ stack build
$ stack exec neut build test/res/fact.neut
$ ./file
#+END_SRC

Neut depends on LLVM and Clang. When you execute =neut build=, both of the commands =llc= and =clang= must be in your =$PATH=.

** References
- L. de Moura, J. Avigad, S. Kong, and C. Roux, Elaboration in Dependent Type Theory, [[https://arxiv.org/abs/1505.04324]], 2015.
- P. Levy, Call-by-Push-Value: A Subsuming Paradigm, Ph. D. thesis, Queen Mary College, 2001.
